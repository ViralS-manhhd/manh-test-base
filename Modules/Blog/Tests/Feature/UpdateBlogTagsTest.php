<?php

namespace Modules\Blog\Tests\Feature;

use Modules\Blog\Entities\BlogTag;
use Modules\Core\Tests\TestCase;

class UpdateBlogTagsTest extends TestCase
{
    protected $tag;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->tag = create(BlogTag::class);
    }

    private function accessEditTagForm()
    {
        return $this->get(route('blog-tags.edit', $this->tag->id));
    }

    private function updateTag($overrides = [])
    {
        return $this->patch(route('blog-tags.update', $this->tag->id), $overrides);
    }

    /** @test */
    public function unauthenticated_users_can_not_access_edit_form()
    {
        $this->accessEditTagForm()
            ->assertRedirect(self::LOGIN_URL);
    }

    /** @test */
    public function authenticated_users_can_access_edit_form()
    {
        $this->signIn();

        $this->accessEditTagForm()
            ->assertSee($this->tag->name)
            ->assertSee($this->tag->status)
            ->assertSee($this->tag->statusName);
    }

    /** @test */
    public function unauthenticated_users_can_not_update_tag()
    {
        $this->updateTag()
            ->assertRedirect(self::LOGIN_URL);
    }

    /** @test */
    public function authenticated_users_can_update_tag()
    {
        $this->signIn();

        $this->updateTag([
            'name'   => 'name test',
            'status' => 1,
        ]);

        tap($this->tag->refresh(), function ($tag) {
            $this->assertEquals('name test', $tag->name);
            $this->assertEquals(1, $tag->status);
        });
    }

    /** @test */
    public function update_tag_requires_name_and_status()
    {
        $this->signIn();

        $this->updateTag(['name' => 'name test'])
            ->assertSessionHasErrors('status');
        $this->updateTag(['status' => 1])
            ->assertSessionHasErrors('name');
    }
}
